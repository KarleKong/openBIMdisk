# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hfc.protos.common import common_pb2 as hfc_dot_protos_dot_common_dot_common__pb2
from hfc.protos.peer import events_pb2 as hfc_dot_protos_dot_peer_dot_events__pb2


class DeliverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Deliver = channel.stream_stream(
                '/protos.Deliver/Deliver',
                request_serializer=hfc_dot_protos_dot_common_dot_common__pb2.Envelope.SerializeToString,
                response_deserializer=hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.FromString,
                )
        self.DeliverFiltered = channel.stream_stream(
                '/protos.Deliver/DeliverFiltered',
                request_serializer=hfc_dot_protos_dot_common_dot_common__pb2.Envelope.SerializeToString,
                response_deserializer=hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.FromString,
                )
        self.DeliverWithPrivateData = channel.stream_stream(
                '/protos.Deliver/DeliverWithPrivateData',
                request_serializer=hfc_dot_protos_dot_common_dot_common__pb2.Envelope.SerializeToString,
                response_deserializer=hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.FromString,
                )


class DeliverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Deliver(self, request_iterator, context):
        """Deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with
        Payload data as a marshaled orderer.SeekInfo message,
        then a stream of block replies is received
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeliverFiltered(self, request_iterator, context):
        """DeliverFiltered first requires an Envelope of type ab.DELIVER_SEEK_INFO with
        Payload data as a marshaled orderer.SeekInfo message,
        then a stream of **filtered** block replies is received
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeliverWithPrivateData(self, request_iterator, context):
        """DeliverWithPrivateData first requires an Envelope of type ab.DELIVER_SEEK_INFO with
        Payload data as a marshaled orderer.SeekInfo message,
        then a stream of block and private data replies is received
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeliverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Deliver': grpc.stream_stream_rpc_method_handler(
                    servicer.Deliver,
                    request_deserializer=hfc_dot_protos_dot_common_dot_common__pb2.Envelope.FromString,
                    response_serializer=hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.SerializeToString,
            ),
            'DeliverFiltered': grpc.stream_stream_rpc_method_handler(
                    servicer.DeliverFiltered,
                    request_deserializer=hfc_dot_protos_dot_common_dot_common__pb2.Envelope.FromString,
                    response_serializer=hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.SerializeToString,
            ),
            'DeliverWithPrivateData': grpc.stream_stream_rpc_method_handler(
                    servicer.DeliverWithPrivateData,
                    request_deserializer=hfc_dot_protos_dot_common_dot_common__pb2.Envelope.FromString,
                    response_serializer=hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.Deliver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Deliver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Deliver(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/protos.Deliver/Deliver',
            hfc_dot_protos_dot_common_dot_common__pb2.Envelope.SerializeToString,
            hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeliverFiltered(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/protos.Deliver/DeliverFiltered',
            hfc_dot_protos_dot_common_dot_common__pb2.Envelope.SerializeToString,
            hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeliverWithPrivateData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/protos.Deliver/DeliverWithPrivateData',
            hfc_dot_protos_dot_common_dot_common__pb2.Envelope.SerializeToString,
            hfc_dot_protos_dot_peer_dot_events__pb2.DeliverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
